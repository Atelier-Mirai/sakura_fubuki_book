= 初めてのHTML

//abstract{
  ウェブサイト作成の土台となるHTML(HyperText Markup Language)の基本文法をご紹介します。HTMLは、ウェブサイトに記されたものが、見出しなのか、本文なのか、あるいは画像なのかといった、「文書構造」を記述するための言語で、とても簡潔で理解しやすい文法となっています。

  何事も上達するには基礎がとても大切です。こつこつ習得していきましょう。
//}

== 学習の手引き

=== ウェブサイト作成の為の三つの言語 @<code>{HTML / CSS / JavaScript}
ウェブサイトを作成する為に用いられる言語には、大きく次の三つがあります。
//vspace[latex][3mm]
 * @<code>{HTML(@<ruby>{HyperText Markup Language,ハイパーテキストマークアップランゲージ})} @<br>{}
#@# ウェブサイトの文書構造を記述するための言語です。見出し、本文、画像など、それぞれが意味するものについて、専用の「タグ」を使って表現していきます。
#@# HTML(HyperText Markup Language) は、ウェブページを作成するために開発された言語で、
  　HyperText Markup Language を日本語で表すなら、「ハイパーテキストに目印をつける言語」くらいの意味になります。@<br>{}
  　目印をつける(Markup)というのは、文書の各部分（見出し・段落・表・リストなど)が果たしている役割が分かるようにすることです。そのために専用の「タグ」を使います。 @<br>{}
  　コンピュータに理解できるよう文書構造を定義することが、HTMLの最も重要な役割です。
//vspace[latex][3mm]
 * @<code>{CSS(@<ruby>{Cascading Style Sheet,カスケーディング・スタイルシート})} @<br>{}
  　ウェブサイトの見た目を飾り付け、彩る為の言語です。文字の大きさや色の指定から画像の配置先など、様々な装飾を行うことができます。@<br>{}
#@# CSS(Cascading Style Sheet) とは、
#@# ウェブページの要素の配置や見栄えなどを記述するための言語です。指定できる項目は、要素の大きさや配置、要素間の位置関係や空白、要素の境界線や余白、要素間 の間の空白や周囲の余白、文字の大きさや文字や行の間隔、@<ruby>{書体,フォント}の種類や変形(太字や斜体など)、箇条書きの表示書式、背景色や背景画像など多岐に渡ります。
#@# HTMLタグが親子関係(包含関係)にある場合、多くの設定値は親要素に指定されたものが子要素、孫要素に引き継がれ、子要素で指定されたものが追加されていきます。このように設定値が上から下へ伝播していく様子を、階段状の瀧を意味する cascade (カスケード)になぞらえて、命名されました。
  　HTMLのタグが親子関係(包含関係)にある場合、多くの設定値は親要素に指定されたものが子要素、孫要素に引き継がれていきます。このように設定値が上から下へ@<ruby>{伝播,でんぱ}していく様子を、階段状の瀧を意味する @<ruby>{cascade,カスケード}になぞらえて、命名されました。
//vspace[latex][3mm]
 * @<code>{@<ruby>{JavaScript,ジャバスクリプト}} @<br>{}
  　ウェブサイトに、「双方向性・相互作用性（インタラクティブ）」を@<ruby>{齎,もたら}すために用いられるプログラミング言語です。 @<br>{}
  　例えば、閲覧者の操作に反応して表示が書き換わったり、ページが表示される際に写真などの要素に動きや効果を加えたり、サーバと通信してデータを取得したりするなど、現在のウェブサイトには欠かせないプログラミング言語となっています。
#@# 特定のボタンが押された際の動きを記述したり、ページが読み込まれた際のアニメーション効果を実現するなど、様々に活躍します。
#@# JavaScript(ジャバスクリプト) は主にブラウザで動くプログラミング言語です。
#@# JavaScript は、HTML ファイルから JavaScript が書かれたファイルを読み込む形で良く使われます。
//vspace[latex][3mm]

それぞれの詳細を@<ruby>{知悉,ちしつ}することは大変ですが、全てを知らずとも良く使う基本的なコードのみでもウェブサイトの作成は充分可能ですので、学んでいきましょう。

=== 学習の為の参考サイトや書籍のご紹介

==== HTML / CSS を学ぶ為に
ウェブサイト作成のために、様々な参考書籍があり、またネット上でも有益なサイトが多数ありますが、始めて学ぶ方向けには、（準）公式サイトである、ＭＤＮより提供されている

 * @<href>{https://developer.mozilla.org/ja/docs/Learn/Getting_started_with_the_web,ウェブ入門}
 * @<href>{https://developer.mozilla.org/ja/docs/Learn/Getting_started_with_the_web/HTML_basics,HTML の基本}
 * @<href>{https://developer.mozilla.org/ja/docs/Learn/Getting_started_with_the_web/CSS_basics,CSS の基本}

が役に立つことでしょう。
//blankline

また、どのような仕組みでウェブサイトが閲覧できるのか、少し技術的な背景についても知見があると、（専門家を目指す方はもちろんですが） 知的好奇心を満たす点からも楽しいものです。

 * @<href>{https://developer.mozilla.org/ja/docs/Learn/Getting_started_with_the_web/How_the_Web_works,ウェブのしくみ}

//blankline
ＭＤＮでの学習を終えた方には、巻末に挙げた参考書籍の中から次の二冊をお勧めします。

 * CSSグリッドで作る HTML5&CSS3 レッスンブック
 * 作って学ぶ　HTML＆CSSモダンコーディング

前書は、初心者向けに基礎的なウェブサイトの作成を簡単な技術的な背景も含めて解説されている良書です。本書の執筆に関しても、その多くの部分を負っており、貢献に感謝いたします。後書は、前書の学習を終え、基礎的なHTML/CSSが書けるようになった方が、より進んだサイト作成の技術を学ぶために最適な一冊となっています。
//blankline

==== JavaScript を学ぶ為に
JavaScript の学習に当たっては、以下のＭＤＮの説明が概要を掴むには良いでしょう。

 * @<href>{https://developer.mozilla.org/ja/docs/Learn/Getting_started_with_the_web/JavaScript_basics,JavaScript の基本}

簡潔に説明されてはいますが、始めてプログラミングに触れる方には少し難しいと感じるかもしれません。そういった方へは、巻末の参考書籍

 * スラスラ読める JavaScript ふりがなプログラミング

がお勧めです。一語一語、漢文に倣った読み下し文でコードの意味が書かれており、短いコードの一文一文を確かめながら実行することで、理解を深めていくことができるようになっています。

JavaScript の 文法を理解し、簡単なコードを書けるようになったところで、実際のウェブサイトに組み込んで見ましょう。

 * 動くWebデザインアイディア帳 / 動くWebデザインアイディア帳 実践編

では、様々な動きを@<ruby>{齎,もたら}すための、 CSSアニメーション や、JavaScript で書かれた各種ライブラリの使い方等が紹介されています。少しコードが汚いのが残念ではありますが、二冊合計で９００ページにも上る豊富な事例が掲載されておりますので、実際のウェブサイト作成に役立つ一冊となっています。

 * JavaScript Primer 迷わないための入門書

は、JavaScript をより深く知りたい方にお勧めの一冊。難易度高目ではありますが、前半だけでも読み通すと、言語の全容を知ることができ、他のプログラミング言語の理解にも繋がります。

== HTMLの基本

テキストエディタ Atomの紹介で書いた短いHTMLの中に基本が詰まっています。

//list[][index.html][1]{
<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>HTML学習</title>
  </head>
  <body>
    <h1>初めてのHTML</h1>
    <p>
      HTMLを学習して、素敵なサイトを作れるように 成ります。
    </p>
  </body>
</html>
//}

//image[html_head_body][][width=100%]

=== ファイル名について
ファイル名を、@<file>{index.html} としました。
@<file>{index}は、「索引」「指針」「指標」などの意味を持つ英単語です。
ウェブサイトにアクセスした際、特にページの指定がされなければ、ブラウザは @<file>{index.html}を表示します。例えば、@<file>{https://example.com/} にアクセスすると、ブラウザは@<file>{https://example.com/index.html}のファイルを表示します。

@<file>{.html}は、@<B>{拡張子}と呼ばれます。ファイルの種類が HTML であることを示しています。
拡張子が @<B>{.html}であるファイルを開くと、@<B>{OS}により既定のブラウザが開きます。


#@# @<file>{index}は、@<B>{ファイル名}と呼ばれます。後述する@<B>{拡張子}と区別する意図で、@<B>{主ファイル名}と呼ばれることもあります。

#@# == HTMLの文法

=== DOCTYPE
HTML文書の先頭に書かれている @<code>{<!DOCTYPE html>} は、@<B>{DOCTYPE宣言}と呼ばれます。その唯一の役割は @<B>{HTML5@<fn>{html5}}で書かれている旨をブラウザに伝えることです。今日では無意味な記述ですが、歴史的な経緯により、先頭に書く必要があります。

//footnote[html5][ウェブの発明者であるバーナーズリー氏が主催するW3Cの規格HTML5と、ブラウザ開発企業であるMozilla, Apple, Operaによって設立された団体WHATWGが推進する規格HTML Living Standard がありましたが、HTML Living Standard に合流する形で、HTML5は廃止されています。]


=== @<code>{<html>} と @<code>{<head>} と @<code>{<body>} について
@<code>{<html>} 全体は、大きく二つの部分 @<code>{<head>} と @<code>{<body>}  に分かれます。
@<code>{<head>}  は、ウェブページに関する設定を書く場所で、以下のことを記述しています。

 * 文字コードとして、@<code>{utf-8} を使用すること
 * 文書の表題が、「HTML学習」であること

@<code>{<body>} は、コンテンツ(内容・出し物)を書く場所で、以下を記述しています。

 * 大見出し(h1)に、「初めてのHTML」
 * 段落(p)に、「HTMLを学習して(略)」

//note[文字コードと「文字化け」について]{
かつてコンピュータが英数字しか扱えなかった時代、アルファベットの「@<code>{A}」は十六進数の@<code>{41}(十進数の@<code>{65})、「@<code>{B}」は@<code>{42}と番号を割り振っていました。これを @<ruby>{ASCII,アスキー}コードと言います。

その後、日本語を扱えるように拡張され、例えば「@<code>{日}」は 十六進数の @<code>{93 FA}と番号付けされました。これを @<ruby>{Shift JIS,シフトジス}コードと言います。

Shift JIS コードは長らく使われてきましたが、現在ではほぼ世界中の文字を扱えるようになった @<ruby>{UTF-8,ユーティーエフエイト} が標準となっています。例えば「@<code>{日}」には、@<code>{E6 97 A5}という文字コードが割り振られています。

同じ「@<code>{日}」という文字ですが、割り当てられている文字コードが違うため、古いウェブサイトを閲覧した際など、正しく文字が読めないことが起こります。これがいわゆる「文字化け」です。

@<code>{<meta charset="utf-8">} ととても短いコードですが、
せっかく作ったウェブサイトが文字化けしてしまわぬよう、
大事な役割を担っていたのですね。
//}



=== 要素とは
//sideimage[html11][60mm][sep=5mm,side=R]{
  @<code>{HTML}では、@<B>{コンテンツ(内容)} を @<B>{開始タグ} と @<B>{終了タグ} で @<B>{マークアップ} (印付け)することにより、その種類を明確にします。マークアップした部分は左のような構造になり、全体を要素と呼びます。

  この例では、開始タグ@<code>{<h1>}と、終了タグ@<code>{</h1>}で囲まれた範囲「初めてのHTML」が「大見出し」であることを示しています。
//}

人が見ると、「見出し」が「始めてのHTML」、「本文」が「HTMLを学習して・・・」であることは一目瞭然ですが、コンピュータにとってそれが何であるかは自明ではありません。そこで、@<code>{<h1>始めてのHTML</h1>}と書くことで、「始めてのHTML」が「大見出し」であることを「印付け（マークアップ）」してあげるのです。

それぞれが何であるかを表現できるように用意された適切なタグを使うことが、良いウェブサイト作りの第一歩になります。  @<fn>{fn-100}
//footnote[fn-100][全部で100以上のタグが用意されていますが、良く用いるタグは十数個です。安心して少しずつ学んでいきましょう。]

=== タグは入れ子にする
//sideimage[right_html][40mm][sep=5mm,side=R]{
複数のHTMLタグでマークアップする場合、開始タグと終了タグは、他のタグの中に完全に入った状態(入れ子)にすることが求められます。
//}
//sideimage[wrong_html][40mm][sep=5mm,side=R]{
上は正しいHTMLで、下は誤ったHTMLです。タグの対応状態を確認してください。
//}

=== 親要素と子要素
//sideimage[html14][60mm][sep=5mm,side=R]{
  入れ子の形で記述すると、階層構造が作られます。このとき、上位階層の要素を「親要素」、下位階層の要素を「子要素」と呼びます。

  例えば、@<code>{<body>} は @<code>{<h1>} の親要素、 @<code>{<h1>} は @<code>{<body>} の子要素です。
//}

=== コメント(覚書・説明書き)
//sideimage[comment][60mm][sep=5mm,side=R]{
ソースコードを分かり易くするための覚書、説明書きが出来るよう、@<B>{コメント} と呼ばれる構文があります。
//}
//vspace[latex][2mm]
作成したウェブサイトを閲覧する際にはないものとして扱われますので、文法上、絶対に書かなければ成らないものはありませんが、適切なコメントを書くことにより、自らの助けともなります。

また、不要となったコードを一時的に非表示にしたり、参考となるコードを残しておく為にも使うことが出来ます。

@<code>{<!--  -->} の間にコメントを書いていきますが、Atom など ほとんどのテキストエディタでは、@<code>{command + /} (コマンドキーと @<code>{/}キーを同時に押す)でコメントにしたり、もう一度押すとコメントを解除できます。エディタの支援機能を活用して、効率的にコーディングしていきましょう。

=== 字下げ(インデント)
HTMLでは、改行や空白は無視されますので、どのように改行しても良いですが、タグの親子関係(入れ子関係)が分かりやすいよう、綺麗に字下げ(インデント)することで、自分が書きたいことを明確にでき、コードの不具合も発見しやすくなります。

//sideimage[good_html1][60mm][sep=5mm,side=R]{
@<B>{好ましい字下げ 1}
@<br>{}
まったく字下げをせず一行に書いていますが、短いコードなのでひと目で分かります。
//}
//blankline

//sideimage[good_html2][60mm][sep=5mm,side=R]{
@<B>{好ましい字下げ 2}
@<br>{}
タグごとに字下げをした例です。タグの中にタグが配置されているという、抱合関係・親子関係が明確で、これも好ましいコードです。
//}
//blankline

//sideimage[good_html3][60mm][sep=5mm,side=R]{
@<B>{好ましい字下げ 3}
@<br>{}
全てのタグを字下げすると、行数の増加や、深く成りすぎた字下げにより、かえって分かりにくくなることもあります。
そのため、@<code>{<h1>}タグはそのまま書いてもひと目で内容が分かるので、字下げせずに書いた例です。これも好ましいコードです。
//}

//vspace[latex][7mm]

//sideimage[bad_html][60mm][sep=5mm,side=R]{
@<B>{不適切な字下げ}
@<br>{}
字下げがめちゃくちゃに成っています。少し極端な例を挙げましたが、慣れないうちは書くことに一生懸命でついぐちゃぐちゃに成ってしまいます。上の三つの例のように見易く綺麗に整えることを心がけましょう。
//}

== じゃんけんゲームの土台を作る

#@# //abstract{
#@#   JavaScriptは主にウェブブラウザの中で動くプログラミング言語です。HTMLからJavaScriptを呼び出すことで、ジャンケンゲームを創り始めていきます。
#@# //}

#@# TODO: 複数のファイルを呼び出すんだよ〜って説明を

HTML の基礎ができたところで、もう少し発展させていきましょう。
じゃんけんゲームの土台とするために、先ほど作成した@<file>{index.html}を次のように編集しましょう。

//list[][index.html][file=source/index0_comment_less.html, 1]{
//}

少し分量が増えました。HTMLには「コメント」機能があります。@<code>{<!-- 説明書き -->}のように記述することで、プログラムの動作には影響を与えることなく、プログラムを読む人のために、説明を記すことができます。

コメント機能を使って、説明書きを追加してみると、次のようになります。

//list[][index.html (コメント付き)][file=source/index0.html, 1]{
//}


#@# //sideimage[first_janken_browser][55mm][sep=5mm,side=R]{
紙幅の関係上、細かい説明は割愛しますが、コメントを読むことでそれぞれのコードが果たしている役割は理解できるのではないでしょうか。
より詳しく知りたい方には、「@<href>{https://developer.mozilla.org/ja/docs/Web/HTML/Element, HTML 要素リファレンス}」が、(準)公式サイトとして、とても良くまとまっていますので、是非ご覧になってください。
//blankline
作成した @<file>{index.html} をブラウザで開きます。
絵も色もなくて少し寂しいですが、最後には綺麗に仕上げていきますので、お楽しみに。
#@# //}

//image[first_janken_browser][][width=50%]

==[column] コンピュータによる画像表現

=== ラスター形式

//sideimage[nine][25mm][sep=5mm]{
コンピュータで画像を表現するにはどのようにしたら良いのでしょうか。
左は 8 × 8 = 64 個の画素を使って作成した 数字の「９」の画像です。
画素が光っていない黒を0, 光っている白を1とすると、
//quote{
//noindent
00000000
01111110
01111110
00000000
11111110
11111110
11111110
00000000
//}
の64@<ruby>{bit,ビット}(= 8 @<ruby>{Byte,バイト})で表現できます。
//}
//vspace[latex][2mm]

白黒画像でしたらこれで完了ですが、カラー写真では、フルカラー16,777,216色を表現するために、赤256段階(=8@<ruby>{bit,ビット})、緑256段階(=8@<ruby>{bit,ビット})、青256段階(=8@<ruby>{bit,ビット})が必要ですから、8 Byte × 8 × 8 × 8 = 512 @<ruby>{Byte,バイト}となります。

iPhone では、3,024 × 4,032 = 12,192,768 もの画素数で写真を撮ることができ、さらに赤1,024段階(=10ビット)、緑1,024段階(=10ビット)、青1,024段階(=10ビット)の1,073,741,824色が表現できます。なので、写真一枚を保存するために、
3,024 × 4,032 × 10 × 10 × 10 = 12,192,768,000 @<ruby>{bit,ビット} (=1,524,096,000 @<ruby>{Byte,バイト} =  1,488,375 @<ruby>{kB,キロバイト} = 1,453 @<ruby>{MB,メガバイト} = 1.4 @<ruby>{GB,ギガバイト}) もの容量が必要となります。数十枚写真を撮るだけで、容量一杯となってしまいます。
そこで、写真の情報量をそのまま保存するのではなく、「@<B>{圧縮}」して保存することにしましょう。

先ほどの数字の「９」の例ですと、
//quote{
//noindent
黒黒黒黒黒黒黒黒 黒白白白白白白黒 黒白白白白白白黒 黒黒黒黒黒黒黒黒 白白白白白白白黒 白白白白白白白黒 白白白白白白白黒 黒黒黒黒黒黒黒黒
//}
とそのまま表現する代わりに、同じ色が続いているところは色の数を記すことにすると
//quote{
//noindent
黒９白６黒２白６黒９白７黒１白７黒１白７黒９
//}
と 22 文字で表現できます。さらに黒の次は白なので、省略できそうです。すると、

//quote{
//noindent
９６２６９７１７１７９
//}
と 11 文字で表現できます。

そのまま表現していた際には 64 文字必要でしたが、11 ÷ 64 = 17% と 約 1 / 6 で済みました。これが圧縮の原理です。(ランレングス圧縮と呼ばれ、FAXなどで用いられています。)
//blankline
FAXなどで用いられているランレングス圧縮ですが、繰り返しが少ないと効率が悪化するという弱点を抱えています。そこで、より優れた様々な圧縮アルゴリズムが考案されています。
例えば、iPhone では HEVC(High Efficiency Video Coding) 方式を採用することにより、一枚の写真を保存するために 1.4 @<ruby>{GB,ギガバイト} 必要であったものを、数 @<ruby>{MB,メガバイト} と、数百分の一に圧縮しています。

=== 次世代画像形式の@<ruby>{WebP,ウェッピー}

様々な画像形式が考案され、写真用の@<ruby>{JPEG,ジェイペグ}, 図やイラストのための@<ruby>{GIF,ジフ},@<ruby>{PNG,ピング}が主流となりましたが、こうした中登場したのが、次世代画像形式の@<ruby>{WebP,ウェッピー}です。

//quote{
//noindent
　WebPとは、グーグル社が開発・公開している画像ファイル形式の一つ。標準のファイル拡張子は「.webp」。Webページへ埋め込む静止画像に適した画像形式として、既存のJPEGやGIF、PNGの置き換えが可能である。 @<br>{}
　JPEGのような写真に適した高圧縮率の非可逆圧縮方式と、GIFやPNGのような図表やイラストに適した可逆圧縮方式の両方に対応する。透過PNGのようなピクセル単位の透過度(アルファチャンネル)が非可逆圧縮でも利用でき、GIFアニメーションのような簡易なアニメーション機能(フルカラー画像や非可逆圧縮も可)にも対応する。【出典: IT用語辞典】
//}

ウェブ制作会社ICSが提供する技術情報メディアがあります。HTML / CSS / JavaScriptを中心とした記事が多数掲載されています。@<ruby>{WebP,ウェッピー}について書かれた記事もございましたので、引用してご紹介いたします。 @<fn>{ics}

=== 次世代画像形式のWebP、そしてAVIFへ

長い間、Webの静止画に関しては「写真のJPEG、ロゴやイラストのGIF、透過画像のPNG」という明確な使い分けが確立されて来ました。WebPはこのすべてを置き換えることができる次世代のフォーマットです。

=== WebPはJPEG/GIF/PNG(APNG)をカバーする魅力的なフォーマット

WebPを使うことで、これまでは用途や画像の特徴ごとに使い分けが必要だったフォーマットの一本化が可能になります。主な特徴を簡単に紹介しましょう。

 * 高い圧縮率：同等画質のJPEGと比較して20-30%のサイズ削減（JPEGの置き換え）
 * 不可逆圧縮と透過アニメーションの併用（透過アニメーションでも画質を犠牲にしてサイズを削減できる）（GIF/PNGの置き換え）
 * 画質劣化のない可逆圧縮もサポート（GIF/PNGの置き換え）

//image[webp][][width=75%]

=== さらに次世代のフォーマット、AVIFも

  * 多様な色空間やサンプリング方式をサポート
  * WebPよりもさらに高画質でコンパクト（同じサイズでも画質が高く、JPEGに特有のブロックノイズも発生しない）
  * Amazon・Netflix・Google・Microsoft・Mozilla等の幅広い企業によるコンソーシアムが共同で開発（FacebookやAppleも後から参画）

//image[avif][][width=75%]

//blankline

@<code>{ImageMagick} @<fn>{imagemagick}等のツールを導入することで、簡単に画像形式を変換することができますし、また、ネット上でオンラインで変換してくれるサイトもございます。

画像の表示も速くなり、利用者に快適に閲覧してもらえますので、使っていきましょう。

==[/column]

//footnote[ics][@<href>{https://ics.media/entry/201001/,次世代画像形式のWebP、そしてAVIFへ}]

//footnote[imagemagick][@<href>{https://imagemagick.biz/,ImageMagickの使いかた 日本語マニュアル}]
