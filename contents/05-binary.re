= 二進数の話

//abstract{
コンピュータは、「０」と「１」の二つの値を用いる二進数で動いています。黎明期には十進数を用いた計算機もありましたが、実行速度や作成費用などから二進法を用いるものが主流となりました。

今日のコンピュータの基礎となる二進数と、関連して様々な情報表現について紹介します。

また、より深く計算機理論を学びたい方へ向けて、デジタル回路のご紹介と、富山大学幸山教授が書かれた「計算機理論入門」への参照を挙げました。
//}

== 二進数と十進数、十六進数

//sideimage[binary][50mm][sep=5mm]{


十進数は、わたくしたちが日常使っている位取り記法で、とても馴染みがあります。

@<code>{0}、@<code>{1}、@<code>{2}、・・・、@<code>{8}、@<code>{9}と大きくなり、「一の位」が「十」集まると上の位に「進」みます。

@<code>{10}、@<code>{11}、・・・、@<code>{99}と大きくなり、「十の位」が「十」集まると上の位に「進」みます。

@<code>{100}、@<code>{101}、・・・、@<code>{999}と大きくなり、「百の位」が「十」集まると上の位に「進」みます。

「十」集まって一つ上の位に「進」むたびに、その桁の重みが十倍になるのが、「十進数」の特徴です。
例えば、「@<code>{９４３}」という数なら、百を９つ十を４つ一を３つ 併せた数のことです。
//blankline

二進数でも同様ですので、見ていきましょう。

@<code>{0}、@<code>{1} と大きくなり、「一の位」が「二」集まると上の位に「進」みます。

@<code>{10}、@<code>{11} と大きくなり、「二の位」が「二」集まると上の位に「進」みます。
//}


@<code>{100}、@<code>{101} 〜 @<code>{111}と大きくなり、「四の位」が「二」集まると上の位に「進」みます。

「二」集まって一つ上の位に「進」むたびに、その桁の重みが二倍になるのが、「二進数」の特徴です。
例えば、「@<code>{1011}」という数なら、八を１つ二を１つ１を１つ 併せた数、つまり @<code>{じゅういち} のことです。

//blankline
二進数では、すぐに桁数が増えていって数えにくいので、四桁をひとまとめにした、十六進数もよく使われます。十六進数では @<code>{10}〜@<code>{15}までを一桁で表せるような記号を準備する必要があります。黎明期には様々な記号が提案されましたが、今日では@<code>{A, B, C, D, E, F} のアルファベットの使用が定着しました。 @<small>{(@<code>{a, b, c, d, e, f} と小文字を使うことも出来ます。) }@<fn>{sankou}

//footnote[sankou][巻末の参考文献「プログラマの数学」にも位取りを始めとして様々な話題がございます。是非ご一読下さい。]


#@# //tsize[latex][|r|r|r|]
#@# //table[][十進数と二進数、十六進数の表][csv=on,pos=H]{
#@# 十進数, 二進数, 十六進数
#@# ------------
#@# 0, 0000, 0
#@# 1, 0001, 1
#@# 2, 0010, 2
#@# 3, 0011, 3
#@# 4, 0100, 4
#@# 5, 0101, 5
#@# 6, 0110, 6
#@# 7, 0111, 7
#@# 8, 1000, 8
#@# 9, 1001, 9
#@# 10, 1010, A
#@# 11, 1011, B
#@# 12, 1100, C
#@# 13, 1101, D
#@# 14, 1110, E
#@# 15, 1111, F
#@# //}

== コンピュータでのデータ表現
=== 文字

#@# 「０」と「１」の組み合わせで、数が表現できました。
#@# それでは「文字」や「画像」はどのように表現されるのか、それを見ていきましょう。
コンピュータで文字を表現するにはどのようにすれば良いでしょうか？

//image[ascii][ASCIIコード表][]

@<B>{ASCIIコード}と呼ばれる表で、アルファベット「@<code>{A}」には十進数の「@<code>{65}」十六進数の「@<code>{41}」が、「@<code>{B}」には十進数の「@<code>{66}」十六進数の「@<code>{42}」が対応しています。

コンピュータは西洋で生まれましたので、
アルファベット( @<code>{A - Z}, @<code>{a - z})、数字(@<code>{0 - 9}) や、記号(@<code>{@, #, !} など) など約100種類といくつかの制御用のコードを加えて、番号付けした、今日でも現役で使われている表です。

=== 画像

コンピュータで画像を表現するにはどのようにしたら良いのでしょうか？

今日、デジタルカメラで写真を撮影することはとても一般的になりました。
その嚆矢となったのが、未来技術遺産にも登録された、カシオQV-10 @<fn>{qv-10}です。
//footnote[qv-10][@<href>{https://www.itmedia.co.jp/dc/articles/1101/11/news028.html, 10年先の写真を見据えて――カシオ「QV-10」}に、愛情溢れる記事が掲載されています。]

QV-10 では、横320画素 x 縦240画素(=76,800画素)の写真を撮ることができました。
つまり横320箇、縦240箇の升目に分割、各升目の色を表現することにより、一枚の画像を表しています。

//blankline

//sideimage[nine][25mm][sep=5mm]{
左は 8 × 8 = 64 個の画素を使って作成した 数字の「９」の画像です。
画素が光っていない黒を0, 光っている白を1とすると、
//quote{
//noindent
00000000
01111110
01111110
00000000
11111110
11111110
11111110
00000000
//}
の64@<ruby>{bit,ビット}(= 8 @<ruby>{Byte,バイト})で表現できます。
//}
//vspace[latex][2mm]





それでは、色の情報はどのように表せば良いでしょうか。
20年前のものとはなりますが、歴史を感じていただければと、愛知県総合教育センター @<fn>{rgb}の記事より紹介します。

//footnote[rgb][出典: なぜ、フルカラーで表示できる色は、１６７７万色なの？@<href>{https://apec.aichi-c.ed.jp/kyouka/jouho/contents/2018/jissyuu/043/gazou.files/iro.htm,愛知県総合教育センター}]

==== 光の三原色

//sideimage[rgb][30mm][sep=5mm,side=R]{
テレビやコンピュータのブラウン管に表示される色は、光の三原色の赤（R)、緑（G)、青（B)を混ぜて、作り出されています（加法混合）。テレビのブラウン管を虫眼鏡などで拡大してみると、赤、緑、青の蛍光体が光っている様子がわかると思います。
//}

初期のコンピュータ @<fn>{pc-8001}は、現在のように多彩な色表示ではなく、白や黒を含めて８色表示が可能でした。それは、赤、緑、青の各色についてON/OFF（光らせる／消す）を制御し、その組み合わせで、2 × 2 × 2 = 8 通りの色を表現しました。

//footnote[pc-8001][昭和54年に発売されたPC-8001では、テキスト表示 80桁 × 25行、グラフィック表示 160 × 100ドット デジタル 8色 であった。]

つまり、赤、青、緑が単独で光ることで、(1)赤、(2)青、(3)緑の三色が表現できます。
赤と緑、緑と青、青と赤の各二色が光ると、(4)黄色、(5)シアン、(6)マゼンタの三色が表現できます。
そして三色が全て光ることで、(7)白が表現でき、全て消えることで (8)黒が表現できるので、合計 8 色を表現できました。

==== 光の明暗
//sideimage[meian][45mm][sep=5mm,side=R]{
その後、ON / OFFの状態だけではなく、明るさを何段階かに調節した表示が可能になりました。下の図は、赤色を暗い方から明るい方へと 16 段階で表示したものです。
//}
//vspace[latex][2mm]

明暗を変化させることにより、赤色で 16 通りの表現ができます。同じように、緑色、青色も 16 段階で表示すると、その各色 16 通りを組み合わせて、16 × 16 × 16 = 4,096 通りの色が表現できます。

現在では、256段階(=8 @<ruby>{bit,ビット})で明るさが調節できるようになりました。それで、256 × 256 × 256 = 16,777,216通りの色が表現できます。人の目で識別できる色数は、数百万〜一千万色と言われるので、この約1677万色のことを「フルカラー」と呼ぶこともあります。

==== 画像の容量
QV-10 では、横320画素 x 縦240画素(=76,800画素)の写真を撮ることができました。色を各色256段階で表現することにすると、一つの画素につき、赤 8 @<ruby>{bit,ビット}(= 1 @<ruby>{Byte,バイト})、赤 8 @<ruby>{bit,ビット}(= 1 @<ruby>{Byte,バイト})、赤 8 @<ruby>{bit,ビット}(= 1 @<ruby>{Byte,バイト})と、合計 3 @<ruby>{Byte,バイト} 必要ですから、230,400 @<ruby>{Byte,バイト}(= 225 @<ruby>{kB,キロバイト})の容量になります。
QV-10には 2 @<ruby>{MB,メガバイト} のフラッシュメモリが内蔵されており、96枚までの写真が保存できました。 @<fn>{qv-10-2}
//footnote[qv-10-2][当時は24枚撮りの写真フィルムが発売されていましたが、4倍もの写真を撮って、その場で確認することができる、とても画期的な製品でした。]

それから四半世紀経った今日の
#@# iPhone には1200万画素(4032 × 3024)のデジカメが搭載されています。
iPhone では、6,048 × 8,064 = 48,771,072 もの画素数で写真を撮ることができ、さらに赤1,024段階(=10ビット)、緑1,024段階(=10ビット)、青1,024段階(=10ビット)の1,073,741,824色が表現できます。なので、写真一枚を保存するために、6,048 × 8,064 × 10 × 10 × 10 = 48,771,072,000 @<ruby>{bit,ビット} (=6,096,384,000 @<ruby>{Byte,バイト} =  5,953,500 @<ruby>{kB,キロバイト} = 5,814 @<ruby>{MB,メガバイト} = 5.678 @<ruby>{GB,ギガバイト}) もの容量が必要となります。数十枚写真を撮るだけで、容量一杯となってしまいます。
//blankline
そこで、写真の情報量をそのまま保存するのではなく、「@<B>{圧縮}」して保存することにします。

先ほどの数字の「９」の例ですと、
//quote{
//noindent
黒黒黒黒黒黒黒黒 黒白白白白白白黒 黒白白白白白白黒 黒黒黒黒黒黒黒黒 白白白白白白白黒 白白白白白白白黒 白白白白白白白黒 黒黒黒黒黒黒黒黒
//}
とそのまま表現する代わりに、同じ色が続いているところは色の数を記すことにすると
//quote{
//noindent
黒９白６黒２白６黒９白７黒１白７黒１白７黒９
//}
と 22 文字で表現できます。さらに黒の次は白なので、省略できそうです。すると、

//quote{
//noindent
９６２６９７１７１７９
//}
と 11 文字で表現できます。

そのまま表現していた際には 64 文字必要でしたが、11 ÷ 64 = 17% と 約 1 / 6 で済みました。これが圧縮の原理です。(ランレングス圧縮というアルゴリズムで、FAXなどで用いられています。)

//blankline
FAXなどで用いられているランレングス圧縮ですが、繰り返しが少ないと効率が悪化するという弱点を抱えています。そこで、より優れた様々な圧縮アルゴリズムが考案されています。
例えば、iPhone では HEVC(High Efficiency Video Coding) 方式を採用することにより、一枚の写真を保存するために 5.678 @<ruby>{GB,ギガバイト} 必要であったものを、数 @<ruby>{MB,メガバイト} と、数百分の一に圧縮しています。

=== 音声

音声をコンピュータで扱うために、様々な方式が考案されています。その中からパルス符号変調(PCM Pulse Code Modulation)を紹介します。

@<B>{PCM}とは、音声などのアナログ信号をデジタルデータに変換する方式の一つで、信号の強度を一定周期で標本化（サンプリング）したものです。そのまま保存すれば無圧縮データとなります。

アナログ信号の強度をサンプリング周波数に従って一定間隔で測定し、定められたビット数の範囲で整数値として量子化します。例えば、CDの音声はサンプリング周波数44.1kHz（キロヘルツ）、量子化16ビットで記録されています。これは毎秒44,100回信号を測定し、その強度を65,536（2の16乗）段階の値で表していることを意味しています。

@<B>{標本化定理}により、サンプリング周波数の半分の周波数までの信号は再現可能です。人間の可聴音の上限は20kHz程度であることが知られているので、40kHz超のサンプリング周波数を用いれば録音データから概ね自然な音が再生できると言われています。 @<fn>{pcm-description} @<fn>{pcm-figure}

//image[ad][パルス符号変調(PCM)方式によるアナログ-デジタル変換][]

//footnote[pcm-description][出典: IT用語辞典]
//footnote[pcm-figure][図版出典: @<href>{http://www.gxk.jp/elec/musen/1ama/H19/html/H1912A09_.html,パルス変調方式に用いるアナログ信号のデジタル化方式の説明}]

=== 動画

#@# //image[frames-per-second][][width=50%]

//sideimage[frames-per-second][55mm][sep=5mm,side=R]{
パラパラ漫画を読んだことはありますか。 @<fn>{parapara}
//footnote[parapara][画像出典: IT用語辞典]

一枚一枚は人が写っている普通の画像ですが、それらの画像を短い間に切り替えます。すると、「残像効果」 @<fn>{zanzou}「仮現運動」 @<fn>{kagen} と呼ばれる人間の特性により、あたかも動いているように見えます。

//footnote[zanzou][出典: Wikipedia 人の視覚で光を見たとき、その光が消えた後も、それまで見ていた光や映像が残って見えるような現象のこと。]

//footnote[kagen][出典: goo国語辞典 実際には運動がないのに、次々と類似の刺激を与えられると、運動があるように感じる現象。映画はこの現象を応用したもの。]

それでは、一秒間に何枚の画像を切り替えると、滑らかな動画に見えるのでしょうか。


//}

#@# fpsとは、動画のなめらかさを表す単位の一つで、画像や画面を1秒間に何回書き換えているかを表したもの。30fpsの動画は1秒あたり30枚の静止画で構成され、約0.033秒（33ミリ秒）ごとに画像を切り替えて再生される。
#@#
#@# コンピュータや映像機器が動画像の録画や再生を行う際、毎秒数十枚の静止画像（フレームと呼ばれる）を撮影あるいは描画することで連続的な動画を構成している。この静止画の時間あたりの密度をフレームレートと呼び、1秒あたりの画像数を表す単位としてfpsが用いられる。

一秒間に表示される画像の枚数が少なく、一枚の画像が表示される時間が長いと、動きのカクカクとした不自然で低品質な動画となります。短時間で画像が書き換わると、滑らかで高品質な動画となります。@<fn>{fps}映画では一秒間に24コマ、テレビ放送では一秒間に30コマの表示が行われています。
//footnote[fps][出典: IT用語辞典]

以上で、一秒間に24コマ、あるいは、30コマの絵を表示すれば、「動画」になることが分かりました。
二時間の映画ではすごくたくさんの画像(172,800枚 = 24 × 2 × 60 × 60)が必要になります。
動画の容量が気になりますね。

映画は24コマ/秒で、1枚の標準的な画像は(480画素×720画素)です。画素一つ一つにつき、色を表現するために24ビット(=3バイト)必要ですから、一秒間の動画を保存するために約24MB(メガバイト)(=480 × 720 × 3 × 24 / 1024 / 1024)が必要になります。
DVD一枚は4.7GB(ギガバイト) @<fn>{dvd}の容量がありますから、約184秒 @<fn>{dvd2}(=4.25 × 1024 / 23.73)の動画が記録できます。

//footnote[dvd][DVDの容量は4.7GBと表示されて販売されています。このときは1GB=10億バイトとして計算しています。コンピュータの内部では、二進数で綺麗に計算できる 2の30乗 = 1,024 × 1,024 × 1,024 = 1,073,741,824バイトを、1GBとして扱います(1GiBと書くこともあります)。]
//footnote[dvd2][DVDは4.7GB(=4.37GiB)の容量がありますが、ファイル管理用の領域があるため、利用者が使えるデータ領域は4.25GiBとなります]

==== 情報圧縮
DVD一枚には、184秒 = 3分ちょっとの動画が保存できることが分かりました。
二時間120分の映画の映画を保存するためには、40枚のDVDが必要となります。
しかし、実際には一枚のDVDの中に、二時間120分の映画が収録されています。

これを支えているのが、「情報圧縮」技術です。

===== 画像・音声圧縮の基本原理と要素技術 @<fn>{mpeg}

 - 1. 画像の性質を利用 @<br>{}
  二値画像: 白黒画素が連続しやすいので、「ランレングス符号化」@<fn>{rle}する。 @<br>{}
  静止画: 近くの画素は似ているので、「離散コサイン変換(DCT)」@<fn>{dct}する。 @<br>{}
  動画像: 現画面は前画面に似ているので、「フレーム間予測」@<fn>{prediction}する。

 - 2. 人間の視聴覚特性を利用 @<br>{}
  画像: 色信号の劣化には鈍感なので、色情報を「サブ・サンプリング処理」@<fn>{sub}により間引く。 @<br>{}
  音声: 大きな音と同時に存在する小さい音は聞こえにくいという「マスキング効果」@<fn>{masking}を利用する。

 - 3. 符号の発生確率の偏りを利用 @<br>{}
   符号発生確率に差があるので、「可変長符号化」や「算術符号化」@<fn>{arithmetic} を行う。

//blankline
今日では、@<B>{Moving Picture Experts Group}が規格した、@<B>{MPEG}が広く動画圧縮方式として用いられています。

//footnote[mpeg][出典: 日本規格協会グループ @<href>{https://www.jsa.or.jp/datas/media/10000/md_2471.pdf,画像・映像圧縮(JPEG/MPEG) マルチメディアの基盤である 画像や映像に関する技術と関連国際規格}]

//footnote[rle][@<href>{https://e-words.jp/w/ランレングス圧縮.html,ランレングス圧縮}]
//footnote[dct][@<href>{https://e-words.jp/w/離散コサイン変換.html,離散コサイン変換(DCT)}]
//footnote[prediction][@<href>{https://e-words.jp/w/フレーム間予測.html,フレーム間予測}]
//footnote[sub][@<href>{http://www.hdmi-navi.com/subsampling/, サブ・サンプリング}]
//footnote[masking][@<href>{https://ja.wikipedia.org/wiki/音響心理学#マスキング効果,マスキング効果}]
//footnote[arithmetic][@<href>{https://www.ieice-hbkb.org/files/02/02gun_05hen_07.pdf, 符号割り当て}]

== 単位の話
コンピュータでよく使われる単位の話です。既出も含め紹介します。

 * 1 ビット(bit)
  コンピュータで扱うことができる最小の情報量です。スイッチが入っている(1)か、切れている(0)かの、二通りの状態を表せます。二進数1桁の情報量です。 @<br>{}
  ２桁(2ビット)では、00, 01, 10, 11 の4通りを表せます。 @<br>{}
  ３桁(3ビット)では、000, 001, 010, 011, 100, 101, 110, 111 の8通りを表せます。

 * 1バイト(Byte) 半角文字1文字分（8ビット 二進法の8桁分）の情報量です。256通りの文字を区別できるため、数字や記号、アルファベットが表せます。

 * 2バイト 全角文字1文字分の情報量です。日本語は「ひらがな」や「カタカナ」、「漢字」などから成り立ちます。2 バイトあれば、256 × 256 ＝65536 通りの文字を区別することができます。どの文字にどの番号を割り振るのか、様々な文字体系があります。以前はShift-JIS(シフトジス)と呼ばれる文字体系が使われていましたが、現在では世界中の文字を 3 バイト で表現する UTF-8(ユーティーエフエイト)が広く使われています。

 * 1キロバイト(kB) ＝ 1,024バイト。2進数10桁(=2の10乗)で1024通りを表現できます。10進法で、1,000倍のことをｋ(キロ)といいます。コンピュータの世界では、@<code>{2×2×2×2×2×2×2×2×2×2}と2を十回掛けると@<code>{1024}になるので、1024でひとまとめにして、1024バイトのことを 1kB と言い、およそA4用紙一枚程度の情報量です。
 * 1メガバイト(MB) ＝ 1,024 キロバイト ＝ 1,048,576 バイトです。 @<br>{}
  小さめの写真約1枚分、A4約1000枚分の情報量です。昔懐かしいフロッピーディスク1枚は1.44MBでした。
 * 1ギガバイト(GB) ＝ 1,024 メガバイト ＝ 1,048,576 キロバイト ＝ 1,073,741,824 バイト。 CD 1枚74分で 640MBです。DVD 1枚2時間で、4.7GB 〜 8.5GB です。高画質の映画などブルーレイディスクは、25GB 〜 100GB です。
 * 1テラバイト(TB) ＝ 1,024 ギガバイト ＝ 1,048,576 メガバイト ＝ 1,073,741,824 キロバイト ＝ 1,099,511,627,776 バイト。ハードディスクはとても大容量です。1TBのハードディスクで毎日2時間ずつ動画を見るなら、おおよそ100日分の容量になります。

== 計算機理論入門

//sideimage[and][35mm][sep=5mm]{
  コンピュータは、 @<code>{0} と @<code>{1} の二進数で動いていること、その二進数を組み合わせて文字や画像など様々な情報表現が可能なことをご紹介いたしました。

  黎明期には、真空管を用いて作られていたコンピュータですが、トランジスタ、IC, LSI と集積化が進み、小さなチップの中に、数百億ものトランジスタが実装されるようになりました。
//}
@<B>{　　　AND回路}
@<br>{}

//sideimage[and][35mm][sep=5mm]{
多くのトランジスタが高速に動作することで今日のコンピュータの性能がありますが、デジタル回路を支える三つの論理素子、それは @<code>{AND}, @<code>{OR}, @<code>{NOT} です。この三つの論理素子を組み合わせることで、演算、制御、記憶など、コンピュータを形作ることが出来ます。
//}
@<B>{　　　OR回路}
@<br>{}

//sideimage[not][35mm][sep=5mm]{
より本格的に計算機理論を学びたい方のために、富山大学の幸山教授が書かれた「計算機理論入門 〜 コンピュータを設計しよう 〜」がございます。

二進数の基礎から始まり、論理演算や論理回路を学び、最終的には4ビットの加減算ができるコンピュータシステムを作り上げていく内容です。半導体やトランジスタの仕組み、電子回路の基礎も学べる内容となっています。
//}
@<B>{　　　NOT回路}
@<br>{}

//image[4bit_adder][4ビット計算機][width=80%]


@<href>{https://kouyama.sci.u-toyama.ac.jp/main/etc/2003/ssh/sshi.pdf, 計算機理論入門 〜 コンピュータを設計しよう 〜}より、回路図を引用いたしました。

とても良く纏まっているテキストです。少し高度な内容を扱った高校生向けの内容となりますが、是非ご一読なさってみてください。

//clearpage

===[column] コンピュータ豆知識
==== インターネット
  世界中のコンピュータ同士が繋がった巨大なネットワーク(網)。前身はARPANET(アーパネット、高等研究計画局ネットワーク)。ジョゼフ・カール・ロブネット・リックライダー等がアイディアを創り上げた。日本では、村井純氏等が普及に多大な貢献をしている。

//vspace[latex][7mm]
==== クラウド @<fn>{fn-cloud}
//sideimage[cloud][55mm][sep=5mm,side=R]{
  英語で「雲」の意味。従来、自分のコンピュータで行った処理を、インターネット上のコンピュータ上で行う。演算の他、情報伝達、データの保等、様々な役務が提供されている。

  例えば、政府の行政システムのクラウド化には、米国アマゾンとグーグル社が使われることとなった。

//}


==== 電子署名(デジタル署名)
電子署名とは、文書やメッセージなどのデータの真正性を証明するために付加される、短い暗号データ。作成者を証明し、改竄やすり替えが行われていないことを保証する。欧米で紙の文書に記されるサインに似た働きをするためこのように呼ばれる。 @<fn>{denshi}
//footnote[denshi][出典: IT用語辞典]


//vspace[latex][7mm]
==== 量子コンピュータ
//sideimage[uncertainty_principle][35mm][sep=5mm]{
  量子コンピュータは、量子力学的な重ね合わせを用いて並列性を実現するコンピュータである。
  従来のコンピュータ(以下「古典コンピュータ」)の基本素子は、情報量 が0か1のいずれの値しか持ち得ない1ビットを扱うものであるのに対して、
//}
//vspace[latex][2mm]
量子コンピュータで は量子ビット (qubit; quantum bit、キュービット) により、1キュービットにつき0と1の値を任意の割合で重ね合わせて保持する。 n 量子ビットあれば、2 の n 乗 の状態を同時に計算できる。もし、数千qubitのハードウェアが実現した場合、この量子ビットを複数利用して、量子コンピュータは古典コンピュータでは実現し得ない規模の並列コンピューティングが実現する。
理論上、現在の最速スーパーコンピュータで数千年かかっても解けないような計算でも、例えば数十秒といった短い時間でこなすことができる、とされている。

//footnote[fn-cloud][画像出典: Wikipedia]
