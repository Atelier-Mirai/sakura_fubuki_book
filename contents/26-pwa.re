= プログレッシブウェブアプリ (PWA)

//abstract{
プログレッシブウェブアプリ (Progressive web apps, PWA) は、新しいウェブ API と伝統的なプログレッシブな拡張戦略を使用して、クロスプラットフォームのウェブアプリケーションにネイティブアプリと同様の使い勝手をもたらすウェブアプリのことです。
//}

//sideimage[pwa][35mm][sep=5mm]{


プログレッシブウェブアプリ (Progressive web apps, PWA) と呼ばれる技術があります。ブラウザから見るだけであったウェブサイトを、まるで「アプリ」であるかのように見せられるようになります。今まで作成したじゃんけんゲームをより進化させて見ましょう。

どのようなものか、概要を把握されたい方のために、
@<href>{https://developer.mozilla.org/ja/docs/Web/Progressive_web_apps,MDN Web Docs} により、引用して、掲載いたします。少し難しいなと感じられた方は、さらっと眺めていただいて実装方法に移るか、あるいは実装せず、次の章のじゃんけんゲームの公開に移って下さいませ。
//}

== プログレッシブウェブアプリ とは
プログレッシブウェブアプリ (Progressive web apps, PWA) は、新しいウェブ API と伝統的なプログレッシブな拡張戦略を使用して、クロスプラットフォームのウェブアプリケーションにネイティブアプリと同様の使い勝手をもたらすウェブアプリのことです。

ウェブアプリを PWA と呼ぶには、技術的に言えば、 安全なコンテキスト (HTTPS)、1つ以上のサービスワーカー、マニフェストファイルを持つべきです。

=== 安全なコンテキスト (HTTPS)
このウェブアプリケーションは、安全なネットワーク上で提供しなければなりません。安全なサイトにすることは、良い習慣であるだけでなく、特にユーザーが安全な取引を行う必要がある場合には、ウェブアプリケーションを信頼できるサイトとして確立することにもつながります。位置情報やサービスワーカーなどの PWA に関連する機能のほとんどは、アプリが HTTPS を使用して読み込まれた場合にのみ利用できます。

=== サービスワーカー
サービスワーカーとは、ウェブブラウザーがネットワークのリクエストや資産のキャッシュに介入し、その方法を制御することができるスクリプトのことです。サービスワーカーを使用することで、ウェブ開発者は信頼できる高速なウェブページやオフライン操作を作成することができます。

=== マニフェストファイル
アプリがユーザーにどのように表示されるかを制御し、プログレッシブウェブアプリを確実に発見できるようにする JSON ファイルです。アプリの名前、開始 URL、アイコン、その他ウェブサイトをアプリのような形式に変換するために必要なすべての詳細が記述されています。

== PWA の利点

=== 発見可能性
最終的な目的は、ウェブアプリが検索エンジンでより適切に表現され、公開されやすく、カタログ化とランク付けされ、ブラウザーにメタデータを使用してそれらに特別な機能を提供することです。

一部の機能は、Open Graph のような独自の技術によって特定のウェブベースのプラットフォームですでにできるようになっています。これは HTML の <head> ブロック内で <meta> タグを使って同様のメタデータを指定するフォーマットを提供しています。

ここで関連するウェブ標準はウェブアプリマニフェスト（Web app manifest）です。 これは、名前、アイコン、スプラッシュ画面、テーマカラーなどのアプリの機能を JSON 形式のマニフェストファイルで定義します。 これは、アプリ一覧や端末のホーム画面などの場面で使用するためのものです。

=== インストール可能性

ウェブアプリの使い勝手の中心となるのは、ユーザーがホーム画面にアプリのアイコンを表示し、タップしてアプリを開くことができるネイティブコンテナーであり、基盤となるプラットフォームとうまく統合されていることです。

最近のウェブアプリは、ウェブアプリマニフェストに設定されたプロパティや、最近のスマートフォンブラウザーで利用できるウェブアプリのインストール (en-US)と呼ばれる機能によって、このようなネイティブアプリの感覚を持つことができます。

=== リンク可能性

ウェブの最も強力な機能の 1 つは、特定の URL でアプリにリンクできることです。アプリストアは不要で、複雑なインストールプロセスも不要です。これは今までもそうでした。

=== ネットワーク非依存性

最新のウェブアプリケーションは、ネットワークの信頼性が低い、あるいは存在しない場合でも動作します。ネットワーク非依存性の基本的な考え方は、以下の通りです。

ネットワークが利用できない場合でも、サイトを再訪してそのコンテンツを取得できる。
ユーザーが過去に一度でもアクセスしたことのあるコンテンツであれば、接続性が悪い状況でも閲覧できる。
接続がない状況で、ユーザーに表示するものを制御することができます。
これは、ページリクエストを制御するサービスワーカー (オフラインでの保存など)、ネットワークリクエストに対するレスポンスをオフラインで保存する Cache API (サイトの資産を保存するのにとても便利)、アプリケーションデータをオフラインで保存するウェブストレージや IndexedDB などのクライアントサイドのデータストレージ技術など、さまざまな技術を組み合わせて実現されています。

=== プログレッシブエンハンスメントの対応

最近のウェブアプリは、十分な機能を備えたブラウザーでは優れた使い勝手を、機能の劣るブラウザーでは (見劣りするものの) 許容できる使い勝手を提供するように開発することができます。私たちは、プログレッシブエンハンスメントなどのベストプラクティスを用いて、何年も前からこれを行ってきました。プログレッシブエンハンスメントを使用することで、 PWA はクロスブラウザーに対応します。つまり開発者は、 PWA の一部の機能や技術の実装が、ブラウザーの実装ごとに異なることを考慮する必要があります。

=== 再エンゲージ可能性

ネイティブプラットフォームの大きな利点は、ユーザーがアプリを見ていない時や端末を使用していない時でも、アップデートや新しいコンテンツによってユーザーを簡単に再エンゲージできることです。最近のウェブアプリでは、ページを制御するサービスワーカー、サーバーからサービスワーカーを介してアプリに直接アップデートを送信する Web Push API、システム通知を生成する Notifications API などの新しい技術を使用することで、このようなことが可能になっていますが、ユーザーがウェブブラウザーを積極的に使用していないときにも、ユーザーの関心を引くことができます。

=== レスポンシブ性

レスポンシブウェブアプリでは、メディアクエリーやビューポートなどの技術を用いて、デスクトップ、モバイル、タブレットなど、あらゆるフォームファクターに対応する UI を実現しています。

=== 安全性

HTTPS を利用し、セキュリティを考慮してアプリを開発していれば、ウェブプラットフォームは、コンテンツが改ざんされていないことを確認すると同時に、盗み見されることを防ぐ安全な配信メカニズムを提供します。

また、アプリの URL がサイトのドメインと一致するため、ユーザーは正しいアプリをインストールしているかどうかを簡単に確認することができます。これは、アプリストアのアプリとは大きく異なります。アプリストアには似たような名前のアプリがいくつもあり、中には自分のサイトをベースにしたものもあるため、混乱を招くだけです。ウェブアプリは、そのような混乱を解消し、ユーザーに最高の使い勝手を提供します。

//clearpage

== 実装方法

技術的概要を掲載いたしましたが、実装方法は容易です。
ここでは「アプリ」らしく、「全画面表示」できることを企図して、若干の HTML と JavaScript のコードを書き加えましょう。

=== HTML
@<code>{HTML} には、@<code>{<head>}タグ内に次のように記述します。

//list[][]{
<!-- PWA (Progressive Web Apps) -->
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="#477294">
<meta name="theme-color" content="#477294">
<meta name="apple-mobile-web-app-title" content="じゃんけんゲーム">
<link rel="manifest" href="/manifest.json">
<script src="app.js"></script>
//}

@<code>{content="#477294"}は、iPhone のホーム画面に追加した際の色ですので、お好みの色を指定します。
@<code>{content="WAVE"}は、ご自身の作成したアプリケーション名です。ここでは、「じゃんけんゲーム」としています。
@<code>{<link rel="manifest" href="/manifest.json">}は、マニフェスト(宣言書・声明書)ファイルと呼ばれるファイルを読み込みます。例えば次のように書きます。

//list[][manifest.json][file=source/pwa/manifest.json,1]{
//}
アプリの名称や色、使うアイコンの画像ファイルを指定しています。
@<code>{"display": "standalone"} と書くことで、ネイティブアプリのように成ります。

最後に書かれている、 @<code>{<script src="app.js"></script>}では、 @<file>{app.js}ファイルを読み込んでいます。アプリ起動時に、 @<file>{sw.js}を登録しています。

//list[][app.js][file=source/pwa/app.js,1]{
//}

@<file>{sw.js} は、「サービスワーカー」と呼ばれるものです。様々な機能を実装できますが、ここでは単純に電波が届かないときの為のキャッシュのみを行っています。
//list[][sw.js][file=source/pwa/sw.js,1]{
//}

より詳しく解説された記事が以下にございますので、参考にされてください。

 * @<href>{https://jam25.jp/javascript/about-pwa/, PWAとは？実装方法・作り方を企業事例をもとに解説！}
 * @<href>{https://laboradian.com/create-offline-site-using-sw/, Service Worker を使ってオフラインでも閲覧できるウェブページを作る方法}
