= プログラムとは

#@# //abstract{
#@#   プログラムとは何か？ その語源を訪ね、そして今日使われているいくつかのプログラミング言語をご紹介します。そして学校教育でのいくつかの事例をご紹介します。
#@# //}

#@# === プログラミング言語
#@# コンピュータはよく人に喩えられます。コンピュータは、原理的には、人の論理的な思考のすべてが可能です。
#@#
#@# コンピュータの特色は、
#@#   * 高速に計算できる!!(一秒間に数十億回も!!)
#@#   * 繰り返しが得意!!(1日でも1年でも飽きることなく同じことを繰り返します)
#@#   * 博覧強記!!(絶対忘れません!!)
#@#   * 命令どおりに動く(逆に言うと、気を回したり機転を利かすことはできないのですが、膨大な計算の結果、AI(人工知能)は人間らしく見えます)
#@#
#@# コンピュータに、何かさせたいと思ったら、命令をする必要があります。例えば、
#@# 3+8を計算せよ 半径3cmの赤い円を描け 440 Hz(ラ) の音を出せなどです。どうやったら命令できるのでしょう?人間がコンピュータに命令を指示するために 作られた言語が、プログラミング言語です。よく使われているところでは、Ruby(ルビー)、 C(シー)、Java(ジャバ)などがあります。
#@# この本では、JavaScript(ジャバスクリプト)という、ブラウザの上で動く言語を使って、じゃんけんゲームを作ります。
#@#
#@#
#@# TODO: GUI と CUIのお話もあったほうがいい？
#@# （ざっくり触れて、詳しくは、参考文献読んでねにしましょうか）

== 「プログラム」＝「コンピュータへの指示書」
今日の「コンピュータ」＝「電子計算機」が登場する以前から「プログラム」という言葉は使われてきました。
語源は「前に書かれたもの」で、街頭で大勢に示す文書「公文書」の意味です。
#@# //blankline

アルゴリズムとは、ある特定の課題への解法、解き方の手順を書き表したものでしたが、このアルゴリズムを、コンピュータが計算できるよう、コンピュータが理解できる言語で書き表したもの、それが「プログラム」です。
「プログラム」＝「コンピュータへの指示書」です。
#@# //blankline

その昔のコンピュータは、特定の用途の計算のみを行うことができました。（専用計算機）
黎明期のコンピュータは、回路と回路の間の配線を繋ぎ代えることで、異なる種類の計算も行うことができるようになりましたが、たくさんの配線を繋ぎ代えることはとても大変です。
そのために生まれたアイディアが、
「計算機への指令」＝「プログラム」
そのものを計算機に内蔵するというアイディアです。これにより、様々な手順を必要なときに読み込んで書かれた通りの計算を行うことができるようになりました。
これが、現在ほとんどのコンピュータで広く採用されている「プログラム内蔵方式」＝「ノイマン・アーキテクチャ」です。
#@# //blankline

また、シャノン等によりスイッチのオンとオフの回路（スイッチング回路）から、論理回路・デジタル回路への道が拓かれたことや、チューリングによるチューリングマシンの研究、19世紀を生きた数学者であるジョージ・ブールの仕事、ブール代数も、今日のコンピュータの存在に大きく貢献しています。

コンピュータのプログラムは、3つの要素で成り立ちます。

 * 順次処理：上から下へ順番に進みます。
 * 条件判断：YESかNOで答えられる質問です。
 * 繰り返し：何回でも反復します。

これらを組み合わせて、自らの意図する機能を創り上げていきます。

#@# TODO: プログラミングの要素なので、
#@# あと、変数や、関数、データ構造としての配列や連想配列などの説明もあるといいかも

//clearpage

== プログラム・プログラミングの定義

より正確な定義を @<href>{https://e-words.jp/w/プログラム.html,IT用語辞典} で確認してみましょう。

//quote{
@<B>{プログラム}@<br>{}
プログラムとは、予定（表）、計画（表）、課程、式次第などの意味を持つ英単語。ITの分野では、コンピュータに行わせる処理を記述したコンピュータプログラムのことを略して単にプログラムということが多い。

//blankline
@<B>{コンピュータプログラム}@<br>{}
コンピュータが行うべき処理を順序立てて記述したもの。広義の「ソフトウェア」の一部であるが、実用上はプログラムとソフトウェアはほとんど同義のように扱われることが多い。

現代のコンピュータではプログラムは一定の形式に従ってデータとして表現され、記憶装置（メインメモリ）に格納される。実行時にはCPU（中央処理装置）がプログラムに記述された命令を順番に読み出して解釈・実行していく。

プログラムを作成する作業や工程を「プログラミング」、これを行う人や職種のことを「プログラマ」という。人間がプログラムを記述する際には、人間が理解しやすい人工言語である「プログラミング言語」を使うことが多い。プログラミング言語で記述されたプログラムを「ソースコード」という。

ソースコードはコンピュータが解釈・実行することができないため、コンパイラなどの変換ソフトによってコンピュータが解釈・実行できる機械語などで構成された「オブジェクトコード」に変換されてから実行される。スクリプト言語のように、この変換処理を開発時には行わず、実行時にインタプリタなどのソフトウェアによって動的に行う場合もある。
//}

//quote{
@<B>{プログラミング}@<br>{}
プログラミングとは、コンピュータに意図した動作を行わせるために、まとまった処理手順を作成し、与えること。作成された手順のことをコンピュータプログラムあるいは単にプログラムという。プログラミングを行う人や職種のことをプログラマという。
狭義には、プログラミング言語やそれに相当する仕組みや道具を用いて、人間が読み書きしやすい形式のプログラム（ソースコード）を記述していくコーディング作業を指す。広義には、その前後に行われる、設計や試験（テスト）、修正（デバッグ）、実行可能形式への変換（コンパイルやビルドなど）といった一連の作業を含む。

//blankline
@<B>{プログラムの作成}@<br>{}
プログラミングを行うには、まず何をするプログラムを作るのかを明確に定義し、仕様や要件を自然言語で記述したり、大まかな処理の流れを箇条書きやフローチャートなどの図表を用いて設計する。集団でソフトウェア開発を行う場合はプログラムの記述者とは別の設計者が専門に作業を行い、仕様書や設計書などの形でまとめる場合もあるが、個人が小規模のプログラムを作成する場合はこの工程を頭の中で行い、作業や手順としては省略する場合もある。

どんなプログラムを作りたいか決まったら、これをコンピュータが解釈できるプログラミング言語を用いてソースコードとして記述していく。言語やプログラムの記述法には様々な種類があるが、手続き型の言語（手続き型プログラミング）の場合、実行すべき命令を先頭から順に書き下していく。必要に応じて、複数の命令をひとまとめにして名前をつけて呼び出せるようにしたり（関数やサブルーチンなど）、条件分岐や反復（繰り返し）などで命令の流れの制御を行う。

//blankline
@<B>{プログラムの実行}@<br>{}
ソースコードそのものはコンピュータ（の処理装置）が解釈・実行できる形式ではないため、これを機械語（マシン語）のプログラムなど実行可能な形式に変換する必要がある。ソースコードを機械語などのコード（オブジェクトコード）に変換する工程をコンパイルと呼び、プログラムの起動処理やライブラリなど実行に必要なコードを連結する工程をリンクという。これら一連の工程を行って実行可能ファイルやパッケージを作ることをビルドという。

スクリプト言語の場合はこうした明示的な変換工程は不要で、ソースコードを機械語に変換しながら同時に実行するインタプリタなどの処理系で直に実行することができる。記述したコードをすぐ実行でき手軽だが、変換しながら実行するため実行可能ファイルを生成する場合より実行速度やメモリ効率では劣る。

//blankline
@<B>{プログラムの修正（デバッグ）}@<br>{}
作成したプログラムが一度で完全に思い描いたとおりに動作する場合もあるが、大抵は何らかの誤りや不具合を抱えているものである。このため、ビルドしたプログラムを実行してみてテスト（動作試験）を行い、仕様通りに動くか調べる。

誤り（バグ）が発見されると原因や解決策を考え、正しく動作するようにプログラムを書き換える（デバッグ）。バグには単純な記述ミスのようなものから、そもそも解くべき問題に対して選択した計算手順（アルゴリズム）が合っていないといった根本的なレベルのものまで様々な種類がある。

デバッグ作業が完了したら再びビルドとテストを行い、誤りが正されていることを確認する。このビルド→テスト→デバッグの繰り返しによって次第にプログラムの完成度や品質が上がっていき、実際に実用可能なプログラムに仕上げることができる。実際のプログラミングにおいては作業時間の多くがこの繰り返しの工程に費やされる。
//}

== プログラミング言語の種類
人間がコンピュータに指示するために作られた言語が、プログラミング言語です。
用途に応じ様々なプログラミング言語が考案されてきました。そのいくつかをご紹介します。

=== 機械語(左) と アセンブリ言語(右)
//sideimage[machine][50mm][sep=5mm]{
機械語は、「0」と「1」の二進数や「0」-「Ｆ」までの十六進数を書き連ねたものです。
コンピュータはこれを読み取り直接解釈、実行可能な命令データの集まりです。

アセンブリ言語は、コンピュータが直接解釈実行可能な機械語を、人間にわかりやすいよう英略語を用いて書き表した言語です。

左側の機械語は分かりにくいですが、右側のアセンブリ言語は、CLC:比較せよ, LDA:読み込め, ADC:足せ, STA:書き込め, BRK:中断 など、人に理解しやすくなっています。
//}

#@# TODO:
#@# FORTRAN
#@# COBOL
#@# BASIC

=== C言語
//sideimage[c][50mm][sep=5mm]{
@<B>{1 から 10 までの合計を求める}

略してC(シー)ともいいます。比較的人に読みやすい文法を持ちながら、機械に近いところまで書き表すことができるので、小さなコンピュータ(マイコン)が組み込まれた電子機器のプログラミングや、UNIX(ユニックス)などOS(オペレーティングシステム)の開発などに広く用いられています。
//}

=== Ruby(ルビー)
//sideimage[ruby][50mm][sep=5mm]{
@<B>{1 から 10 までの合計を求める}

まつもとゆきひろさん(通称 Matz)により開発されたオブジェクト指向スクリプト言語です。日本で開発されたプログラミング言語として初めて国際電気標準会議で国際規格に認証されました。

開発者のまつもとゆきひろさんは、「Rubyの言語仕様策定において最も重視 しているのはストレスなくプログラミングを楽しむことである (enjoy programming)」と述べています。
//}

=== Scratch(スクラッチ)
//sideimage[scratch][50mm][sep=5mm]{
@<B>{1 から 10 までの合計を求める}

MITメディアラボが開発した視覚的なプログラミング言語で、初めてプログラミングをする小学生が、遊び心ある実験やアニメ、ゲームなどを作ったりすることができます。

小学生でも Ruby を使ってプログラムやロボットを作れるようにした、Smalruby もお薦めです。
@<fn>{smalruby}
//}
//footnote[smalruby][@<href>{https://smalruby.jp,NPO法人Rubyプログラミング少年団}]



#@# == プログラム開発の手順
#@#
#@# TODO: ここで述べるのが適切？　そもそもいる？
#@#
#@# さまざまな開発手法があるが、ここでは、ウォーターフォールモデルの例を挙げる。
#@# 1. プログラムの仕様決定(外部設計) i. 課題を明確にする
#@# ii. 解決のためのアイデアを練る iii. 必要な仕様を決定する
#@# 2. プログラム設計(内部設計)
#@# i. データ構造、アルゴリズムを設計する
#@# ii. フローチャート等を作成する 3. プログラムのコーディング
#@# i. プログラミング言語の文法に従って、プログラムを書く 4. プログラムのデバッグ・テスト
#@# i. 文法エラー、論理エラーを取り除く。
#@# ii. 単体テスト、結合テストを行う。
#@#     タイプミス等の修正を行う。
#@#     「外部設計」で顧客の要求仕様を十分に検討し、「内部設計」で処理手順を十分に検
#@#     討しているとよいが、そうでなかった場合、この段階において出戻りが発生する場合
#@#     がある。
#@# 5. プログラムのドキュメント作成 各工程でドキュメント作成を並行して進めるとよい。 ドキュメントには以下の2種類ある
#@#     システムレベルドキュメント
#@# プログラムの保守、管理のための技術的情報の記録 (ソースコードからドキュメントを自動生成する手法もある)
#@#     ユーザレベルドキュメント
#@#      プログラム利用者のための使用説明書
#@#
#@# TODO: 発祥や、開発者名、使われている分野など追記
#@#

== 学校教育でのプログラミング
小学校からプログラミング教育が始まりました。概要を文部科学省より引用します。

=== なぜプログラミング教育を導入するのか
今日、コンピュータは人々の生活の様々な場面で活用されています。家電や自動車をはじめ身近なものの多くにもコンピュータが内蔵され、人々の生活を便利で豊かにしています。誰にとっても、職業生活をはじめ、学校での学習や生涯学習、家庭生活や余暇生活など、コンピュータなどの情報機器やサービスとそれによって@<ruby>{齎,もたら}される情報を適切に選択・活用し問題を解決していくことが不可欠な社会が到来しつつあります。

コンピュータをより適切、効果的に活用していくためには、その仕組みを知ることが重要です。コンピュータは人が命令を与えることによって動作します。端的に言えば、この命令が「プログラム」であり、命令を与えることが「プログラミング」です。プログラミングによって、コンピュータ自分が求める動作をさせることができるとともに、コンピュータの仕組みの一端をうかがい知ることできるので、コンピュータが「魔法の箱ではなくなり、より主体的に活用することにつながります。

プログラミング教育は子供たちの可能性を広げることにも@<ruby>{繋,つなが}ります。プログラミング能力を開花させ、創造力を発揮して、起業する若者や特許を取得する子供も現れています。秘めた可能性を発掘し、社会で活躍できるきっかけとなることも期待できるのです。

このように、コンピュータを理解し上手に活用していく力を身に付けることは、あらゆる活動においてコンピュータ等の活用が求められるこれからの社会を生きていく子供たちにとって、将来どのような職業に就くとしても、極めて重要なこととなっています。
@<fn>{1}
//footnote[1][出典：文部科学省：小学校プログラミング教育の手引(第三版)]

=== 小学校でのプログラミング教育のねらい
 - 1. 「プログラミング的思考」を育むこと。
 - 2. プログラムの働きや良さ、情報社会がコンピュータ等の情報技術によって支えられていることに気付き、コンピュータを活用して身近な問題の解決や、よりよい社会を築く態度を育むこと。
 - 3. 各教科内容を指導する際に行う場合は、各教科で学びをより確実なものとすること。

小学校においては、文字入力など基本的な操作を習得、プログラミングを体験しながらコンピュータに意図した処理を行わせるために必要な論理的思考力を身に付ける。

=== 中学校でのプログラミング教育のねらい
中学校においては、技術・家庭科においてプログラミング、情報セキュリティに関する内容を充実「計測・制御のプログラミング」に加え、「ネットワークを利用した双方向性のあるコンテンツのプログラミング」等について学ぶ。

=== 高等学校でのプログラミング教育のねらい
高等学校においては、情報科において共通必履修科目「情報I」を新設し、全ての生徒がプログラミングのほか、ネットワーク（情報セキュリティを含む）やデータベースの基礎等について学習「情報I」に加え、選択科目「情報II」を開設。「情報I」において培った基礎の上に、情報システムや多様なデータを適切かつ効果的に活用し、あるいはコンテンツを創造する力を育成。@<fn>{2}

//footnote[2][出典：文部科学省 新学習指導要領のポイント（情報活用能力の育成・ＩＣＴ活用）]

=== プログラミング的思考とは
「自分が意図する一連の活動を実現するために、どのような動きの組合せが必要であり、一つ一つの動きに対応した記号を、どのように組み合わせたらいいか、記号の組合せをどのように改善していけば、より意図した活動に近づくのか」を論理的に考えていく力。

=== 「正多角形を描く」場合について考える
//sideimage[triangle][40mm][sep=5mm]{
コンピュータで正三角形を描く場合を見てみます。
「正三角形を描く」という命令は通常は用意されていないので、そのままでは実行できません。そこで、コンピュータが理解できる(用意されている)命令を組み合わせて命令することを考えます。
紙の上に作図する場合、正多角形がもっている「辺の長さが全て等しい」、「角の大きさが全て等しい」、「円に内接する」、「中心角の大きさが全て等しい」のような正多角形の意味や性質を使って作図します。

コンピュータで作図する場合にも同様に考えます。ここでは「辺の長さと、角の大きさが全て等しい」という正多角形の意味を使い作図する例を考えます。
//}
//vspace[latex][2mm]
この場合、「長さ 100 進む(線を引く)」、「左に120度曲がる」といったコンピュータが理解できる(用意されている)命令を組み合わせることで「正三角形を描け」ます。

より大きな正三角形を描きたければ、「長さ200進む(線を引く)」というように修正します。曲がる角度を変えることで、正六角形や正八角形も描くことができます。

紙の上に鉛筆と定規、分度器やコンパス等を用いて正三角形を描く際も、用いる性質や手順は異なるとしても、児童は同じように手順を考えた上で作図しているはずです。

=== 未来の学びコンソーシアムより 実践例の紹介
#@# @<fn>{fn-manabi}
//image[manabi3][][width=70%]
#@# //footnote[fn-manabi][@<href>{https://miraino-manabi.jp, 未来の学びコンソーシアム}]


== 大学入試試験 情報

@<href>{https://www.dnc.ac.jp/,大学入試センター}には、令和7年度からの大学入試試験で出題される予定となる「情報」に関する試験問題の例が掲載されています。

//image[dnc_sample][][width=80%]

デジタル化についての理解度を問う出題で、解答群も用意されていますので、解答は容易で、正解は次のようになります。

//clearpage

 : 正解
    次の図は、モノクロの画像を16画素モノクロ8階調のデジタルデータに変換する手順を図にしたものである。この時、手順2では「ク）区画の濃淡を一定の規則に従って整数値に置き換えており」、このことを「ケ）量子」化という。手順1から3のような方法でデジタル化された画像データは、「コ）コピーを繰り返したり、伝送したりしても画質が劣化しない」などのメリットがある。

ちなみに、手順１は「標本化（サンプリング）」、手順２は「量子化」、手順３は「符号化」です。

他の例題は、 @<href>{https://www.dnc.ac.jp/albums/abm.php?d=33&f=abm00000307.pdf&n=サンプル問題『情報』_問題.pdf,例題} をご覧ください。

//blankline
これらの例題の狙いとして、次のように案内されています。

//tip{
高等学校学習指導要領「情報I」で、

 - 1. 情報社会の問題解決
 - 2. コミュニケーションと情報デザイン
 - 3. コンピュータとプログラミング
 - 4. 情報通信ネットワークとデータの活用

を学習することを踏まえて、

 * 情報技術の仕組みとその利点、情報社会と人の関わりやその課題に関連する理解を問う。
 * 発表の場において伝えたい情報を分かりやすく表現する情報デザインの考え方や方法を理解し表現する力を問う。
 * 画像のデジタル化に関する一連の流れと、デジタル化のメリットについての理解を問う。
 * IPv4 におけるネットワーク部を表すビット数を題材に、生徒が主体的に学習し探究する場面を設定して、IP アドレスの理解と基数変換の考え方を基に考察する力を問う。

 * 比例代表選挙の議席配分の考え方をプログラムで処理するなど、情報社会の問題解決の過程を題材に、生徒が主体的に学習し探究する場面を設定し、配列、最大値探索、繰り返し処理を用いたアルゴリズムを理解し、そのアルゴリズムをプログラムで表現し、さらに具体的な状況設定に応じてプログラムを修正することを通して問題解決に向けて考察する力を問う。@<small>{(なお、問題の中で使用するプログラム言語は、大学入試センター独自の日本語表記の疑似言語としている。これは、高等学校の授業で何らかのプログラム言語を用いて実習した生徒であれば容易に理解できるものである。)}

 * オープンデータを用いて、基本統計量などから全体の傾向を読み取ったり、予測したりする問題解決の活動の中で、データの活用に関する考察する力を問う。
 * 基本統計量を読み取り、データに含まれる傾向を見いだし、さらに、データの散らばりから傾向を読み取るなど、実践的なデータの活用及び分析に関する基本的な理解と考察する力を問う。
//}

概ねITパスポート以上基本情報技術者未満の出題です。より詳しくは、@<href>{https://www.dnc.ac.jp/albums/abm.php?d=33&f=abm00000300.pdf&n=サンプル問題『情報』_ねらい.pdf,狙い} をご覧ください。
